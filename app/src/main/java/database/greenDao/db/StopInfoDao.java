package database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wuhanbus.bean.StopInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STOP_INFO".
*/
public class StopInfoDao extends AbstractDao<StopInfo, Long> {

    public static final String TABLENAME = "STOP_INFO";

    /**
     * Properties of entity StopInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LineName = new Property(1, String.class, "lineName", false, "LINE_NAME");
        public final static Property LineId = new Property(2, String.class, "lineId", false, "LINE_ID");
        public final static Property LineNo = new Property(3, String.class, "lineNo", false, "LINE_NO");
        public final static Property StopId = new Property(4, String.class, "stopId", false, "STOP_ID");
        public final static Property StopName = new Property(5, String.class, "stopName", false, "STOP_NAME");
        public final static Property Direction = new Property(6, int.class, "direction", false, "DIRECTION");
        public final static Property CurrentStopId = new Property(7, int.class, "currentStopId", false, "CURRENT_STOP_ID");
        public final static Property Lng = new Property(8, double.class, "lng", false, "LNG");
        public final static Property Lat = new Property(9, double.class, "lat", false, "LAT");
    }


    public StopInfoDao(DaoConfig config) {
        super(config);
    }
    
    public StopInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STOP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LINE_NAME\" TEXT," + // 1: lineName
                "\"LINE_ID\" TEXT," + // 2: lineId
                "\"LINE_NO\" TEXT," + // 3: lineNo
                "\"STOP_ID\" TEXT UNIQUE ," + // 4: stopId
                "\"STOP_NAME\" TEXT," + // 5: stopName
                "\"DIRECTION\" INTEGER NOT NULL ," + // 6: direction
                "\"CURRENT_STOP_ID\" INTEGER NOT NULL ," + // 7: currentStopId
                "\"LNG\" REAL NOT NULL ," + // 8: lng
                "\"LAT\" REAL NOT NULL );"); // 9: lat
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STOP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StopInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lineName = entity.getLineName();
        if (lineName != null) {
            stmt.bindString(2, lineName);
        }
 
        String lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindString(3, lineId);
        }
 
        String lineNo = entity.getLineNo();
        if (lineNo != null) {
            stmt.bindString(4, lineNo);
        }
 
        String stopId = entity.getStopId();
        if (stopId != null) {
            stmt.bindString(5, stopId);
        }
 
        String stopName = entity.getStopName();
        if (stopName != null) {
            stmt.bindString(6, stopName);
        }
        stmt.bindLong(7, entity.getDirection());
        stmt.bindLong(8, entity.getCurrentStopId());
        stmt.bindDouble(9, entity.getLng());
        stmt.bindDouble(10, entity.getLat());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StopInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lineName = entity.getLineName();
        if (lineName != null) {
            stmt.bindString(2, lineName);
        }
 
        String lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindString(3, lineId);
        }
 
        String lineNo = entity.getLineNo();
        if (lineNo != null) {
            stmt.bindString(4, lineNo);
        }
 
        String stopId = entity.getStopId();
        if (stopId != null) {
            stmt.bindString(5, stopId);
        }
 
        String stopName = entity.getStopName();
        if (stopName != null) {
            stmt.bindString(6, stopName);
        }
        stmt.bindLong(7, entity.getDirection());
        stmt.bindLong(8, entity.getCurrentStopId());
        stmt.bindDouble(9, entity.getLng());
        stmt.bindDouble(10, entity.getLat());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StopInfo readEntity(Cursor cursor, int offset) {
        StopInfo entity = new StopInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lineName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lineId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lineNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // stopId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // stopName
            cursor.getInt(offset + 6), // direction
            cursor.getInt(offset + 7), // currentStopId
            cursor.getDouble(offset + 8), // lng
            cursor.getDouble(offset + 9) // lat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StopInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLineName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLineId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLineNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStopId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStopName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDirection(cursor.getInt(offset + 6));
        entity.setCurrentStopId(cursor.getInt(offset + 7));
        entity.setLng(cursor.getDouble(offset + 8));
        entity.setLat(cursor.getDouble(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StopInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StopInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StopInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
